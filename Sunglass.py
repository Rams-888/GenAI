# -*- coding: utf-8 -*-
"""Copy of glass.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m2lOM7mzVpv6FGT4O7Oj-MfLGrNlkGzw
"""

!pip install gradio opencv-python-headless

import gradio as gr
import cv2
import numpy as np
from PIL import Image
import os
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Path to your sunglasses dataset (ensure the path and images exist)
glasses_path = "/content/drive/MyDrive/virtual_tryon/Glasses"

# Haar Cascades for face and eye detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

def overlay_glasses(input_image, glass_choice):
    # Convert input PIL image to OpenCV format
    image = np.array(input_image.convert("RGB"))
    image_cv = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    gray = cv2.cvtColor(image_cv, cv2.COLOR_BGR2GRAY)

    # Load the selected sunglasses
    glass_path = os.path.join(glasses_path, glass_choice)
    if not os.path.exists(glass_path):
        return "❌ Selected sunglass not found."

    glass_img = Image.open(glass_path).convert("RGBA")
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    if len(faces) == 0:
        return "❌ No face detected."

    for (x, y, w, h) in faces:
        roi_gray = gray[y:y+h, x:x+w]
        eyes = eye_cascade.detectMultiScale(roi_gray)

        if len(eyes) >= 2:
            # Sort eyes by horizontal position and take the left-most and right-most
            eyes = sorted(eyes, key=lambda e: e[0])[:2]
            eye1, eye2 = eyes
            eye_center_y = (eye1[1] + eye2[1]) // 2

            # Resize the sunglasses to fit face width
            new_width = w
            new_height = int(glass_img.height * new_width / glass_img.width)
            resized_glass = glass_img.resize((new_width, new_height))

            # Overlay glasses
            img_pil = Image.fromarray(cv2.cvtColor(image_cv, cv2.COLOR_BGR2RGB)).convert("RGBA")
            overlay = Image.new("RGBA", img_pil.size)
            x_offset = x
            y_offset = y + eye_center_y - new_height // 2
            overlay.paste(resized_glass, (x_offset, y_offset), resized_glass)

            result = Image.alpha_composite(img_pil, overlay)
            return result.convert("RGB")

        else:
            return "❌ Eyes not detected clearly."

# Load available glasses
glass_files = sorted([f for f in os.listdir(glasses_path) if f.endswith('.png')])

# Gradio Interface
iface = gr.Interface(
    fn=overlay_glasses,
    inputs=[
        gr.Image(type="pil", label="📸 Upload or Capture Face Image"),
        gr.Dropdown(choices=glass_files, label="🕶️ Choose a Sunglass")
    ],
    outputs=gr.Image(type="pil", label="🖼️ Output Image with Sunglass"),
    title="🕶️ Virtual Sunglasses Try-On",
    description="Upload or capture a face image and try virtual sunglasses instantly!"
)

iface.launch(debug=True)