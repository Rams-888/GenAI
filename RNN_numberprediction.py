# -*- coding: utf-8 -*-
"""Copy of predictingnumbersequence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cAlFfphajcKURw9YwvXMWV6oWnnWdp_B
"""

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN,Dense
import matplotlib.pyplot as plt

#Create sequence:1 to 100
sequence = np.array([i for i in range(1,101)])

#Define window size (e.g., 3 inputs -> 1 output)
window_size=3
x=[]
y=[]
#create input-output pairs
for i in range(len(sequence) - window_size):
    x.append(sequence[i:i+window_size])
    y.append(sequence[i+window_size])
#convert to numpy array
x=np.array(x)
y=np.array(y)
#Reshape x to [samples,timesteps,features]
x=x.reshape((x.shape[0], x.shape[1],1))

model = Sequential()
model.add(SimpleRNN(50, activation='relu', input_shape=(window_size, 1)))
model.add(Dense(1))  #Output layer
model.compile(optimizer='adam', loss='mse')

model.fit(x, y, epochs=500, verbose=1)
print("Training Commplete")

test_input = np.array([8,9,10])
test_input=test_input.reshape((1, window_size, 1))  #Reshape for prediction
predicted=model.predict(test_input, verbose=1)
print(f"Predicted next number: {predicted[0][0]:.2f}")

predictions = model.predict(x)
plt.plot(y, label='True Values')
plt.plot(predictions,label='Predicted')
plt.legend()
plt.title("Prediction vs True values")
plt.show()

"""The error `NameError: name 'model' is not defined` occurs because the variable `model` was not created in the current runtime before attempting to save it.

To resolve this, ensure that the cells defining and training the model are executed before attempting to save the model.
"""

import pickle
with open('model.pkl','wb')as f:
  pickle.dump(model,f)

import pickle
with open('/content/model.pkl', 'rb') as f:
    loaded_model = pickle.load(f)

# Now you can use loaded_model for predictions or further evaluation
# For example:
test_input = np.array([8, 9, 10]).reshape((1, window_size, 1))
predicted = loaded_model.predict(test_input, verbose=0)
print(f"predicted next number:{predicted[0][0]:.2f}")